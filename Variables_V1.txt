
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Workspace loaded from C:/Users/derek/Desktop/MIDS 1st Semester/Modeling and Representing Data/Team Projects/Project Two/team-project-2-estrogen-bioassay-and-voting-in-nc-avengers/Part II/.RData]

> ####### Voting in NC (2016 General Elections) ####### 
> 
> #Derek Wales (DLW61)
> 
> library(lme4)
Loading required package: Matrix
> library(tidyverse)
-- Attaching packages --------------------------------------- tidyverse 1.2.1 --
v ggplot2 3.2.1     v purrr   0.3.2
v tibble  2.1.3     v dplyr   0.8.3
v tidyr   1.0.0     v stringr 1.4.0
v readr   1.3.1     v forcats 0.4.0
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x tidyr::expand() masks Matrix::expand()
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
x tidyr::pack()   masks Matrix::pack()
x tidyr::unpack() masks Matrix::unpack()
> library(ggplot2)
> library(ggpubr)
Loading required package: magrittr

Attaching package: ‘magrittr’

The following object is masked from ‘package:purrr’:

    set_names

The following object is masked from ‘package:tidyr’:

    extract

> 
> #setwd("/Users/derek/deskeTeamProject2/team-project-2-estrogen-bioassay-and-voting-in-nc-avengers")
> 
> #Reading file with data for all the voters
> all_voter = read.csv("C:\\Users\\derek\\Desktop\\MIDS 1st Semester\\Modeling and Representing Data\\Team Projects\\Project Two\\team-project-2-estrogen-bioassay-and-voting-in-nc-avengers\\Data\\voter_stats_20161108.txt", 
+                      header = TRUE, comment.char = "",sep='', stringsAsFactors = F)
> #All voters -  514,846 Observations  (Actual number of rows in file)
> 
> #Getting unique rows from all_voters
> all_voter = unique(all_voter)
> 
> #All voters -  461,833 Observations
> 
> #Reading file with data for the voters who actually voted 
> voted_voter = read.delim("C:\\Users\\derek\\Desktop\\MIDS 1st Semester\\Modeling and Representing Data\\Team Projects\\Project Two\\team-project-2-estrogen-bioassay-and-voting-in-nc-avengers\\Data\\history_stats_20161108.txt")
Warning message:
In scan(file = file, what = what, sep = sep, quote = quote, dec = dec,  :
  embedded nul(s) found in input
> 
> #Voted voters - 734,126 Observations    (Actual number of rows in file)
> #all unique rows in Voted_voters already
> 
> #renaming total_voter column in Voted_voters dataframe
> colnames(voted_voter)[9] <- "voted_voters" # I recommend changing to voters and total voters to 
>                                            # Registered Voters
> 
> #Changing datatype of votes to numeric in both the dataframes
> all_voter$total_voters = as.numeric(all_voter$total_voters)
Warning message:
NAs introduced by coercion 
> voted_voter$voted_voters = as.numeric(as.character(voted_voter$voted_voters))
> 
> #Calculating total voting percentage 
> Num_all_voters <- sum(all_voter$total_voters, na.rm = T)  #6,213,883  (Total voters)
> Num_of_voted_voters <- sum(voted_voter$voted_voters)      #4,768,079  (Voters who voted)
> Percent_Voted = (Num_of_voted_voters*100)/Num_all_voters  #76.73 % Voters Voted
> 
> #Removing unwanted columns (DATES & constant value stats_type columns)
> all_voter$election_date <- NULL  
> voted_voter$election_date <- NULL
> voted_voter$update_date <- NULL
> all_voter$stats_type <- NULL
> voted_voter$stats_type <- NULL
> 
> 
> #Removing Rows with empty data
> #inital count of rows |  all_voter - 461,833, voted_voter - 734,126
> 
> 
> all_v_noNA <- all_voter %>%
+   na_if("") %>%
+   na.omit()
> #deleted 1026 rows with missing values (0.2%)
> 
> voted_v_noNA <- voted_voter %>%
+   na_if("") %>%
+   na.omit()
> #deleted 30,024 rows with missing values (4.0%)
> 
> #new count of rows  |   all_voter - 460,807, voted_voter  - 704,102
> 
> Num_all_voters <- sum(all_v_noNA$total_voters, na.rm = T)  #6,210,364  (Total voters)
> Num_of_voted_voters <- sum(voted_v_noNA$voted_voters)      #4,572,359  (Voters who voted)
> Percent_Voted = (Num_of_voted_voters*100)/Num_all_voters   #73.62 % Voters Voted
> 
> #merging the two dataframes 
> votedDataMerged = voted_v_noNA %>% 
+   inner_join (all_v_noNA, 
+               by = c("county_desc" , "precinct_abbrv", "vtd_abbrv", 
+                      "party_cd", "race_code","ethnic_code","sex_code",       
+                      "age"))
Warning messages:
1: Column `county_desc` joining factor and character vector, coercing into character vector 
2: Column `precinct_abbrv` joining factor and character vector, coercing into character vector 
3: Column `vtd_abbrv` joining factor and character vector, coercing into character vector 
4: Column `party_cd` joining factor and character vector, coercing into character vector 
5: Column `race_code` joining factor and character vector, coercing into character vector 
6: Column `ethnic_code` joining factor and character vector, coercing into character vector 
7: Column `sex_code` joining factor and character vector, coercing into character vector 
8: Column `age` joining factor and character vector, coercing into character vector 
> #nrows in votedDataMerged 626,544
> 
> #removing noNA dataframes (not required anymore)
> rm(voted_v_noNA,all_v_noNA)
> 
> #dropping voting_method column (same as voting_method_desc)
> votedDataMerged$voting_method <- NULL
> 
> 
> # What's this?
> str(votedDataMerged)
'data.frame':	626544 obs. of  12 variables:
 $ county_desc       : chr  "ALAMANCE" "ALAMANCE" "ALAMANCE" "ALAMANCE" ...
 $ precinct_abbrv    : chr  "01" "01" "01" "01" ...
 $ vtd_abbrv         : chr  "01" "01" "01" "01" ...
 $ age               : chr  "Age 18 - 25" "Age 18 - 25" "Age 18 - 25" "Age 18 - 25" ...
 $ party_cd          : chr  "DEM" "DEM" "DEM" "DEM" ...
 $ race_code         : chr  "B" "B" "B" "O" ...
 $ ethnic_code       : chr  "NL" "NL" "UN" "HL" ...
 $ sex_code          : chr  "F" "M" "F" "F" ...
 $ voted_voters      : num  2 2 1 1 1 2 1 2 2 1 ...
 $ voting_method_desc: Factor w/ 9 levels "ABSENTEE","ABSENTEE BY MAIL",..: 4 7 4 4 4 7 2 4 7 7 ...
 $ voted_party_cd    : Factor w/ 5 levels "","DEM","LIB",..: 2 2 2 2 2 2 2 2 2 2 ...
 $ total_voters      : num  6 5 1 1 3 3 14 14 14 4 ...
> votedDataMerged$county_desc = as.factor(votedDataMerged$county_desc)
> votedDataMerged$precinct_abbrv = as.factor(votedDataMerged$precinct_abbrv)
> votedDataMerged$vtd_abbrv = as.factor(votedDataMerged$vtd_abbrv)
> votedDataMerged$age = as.factor(votedDataMerged$age)
> votedDataMerged$party_cd = as.factor(votedDataMerged$party_cd)
> votedDataMerged$race_code = as.factor(votedDataMerged$race_code)
> votedDataMerged$ethnic_code = as.factor(votedDataMerged$ethnic_code)
> votedDataMerged$sex_code = as.factor(votedDataMerged$sex_code)
> 
> # changing already factored variable to character and then again to factor (removing any extra factor)
> votedDataMerged$voting_method_desc = as.character(votedDataMerged$voting_method_desc)
> votedDataMerged$voting_method_desc = as.factor(votedDataMerged$voting_method_desc)
> votedDataMerged$voted_party_cd = as.character(votedDataMerged$voted_party_cd)
> votedDataMerged$voted_party_cd = as.factor(votedDataMerged$voted_party_cd)
> 
> 
> 
> nrow(unique(votedDataMerged[,c("county_desc" , "precinct_abbrv", "vtd_abbrv",
+                                "party_cd", "race_code","ethnic_code","sex_code", 
+                                "age","voted_voters","voting_method_desc","voted_party_cd")]))
[1] 626544
> 
> 
> # Creating a new dataframe to get Overall Voting stats 
> # Since the same number of total_voter was appearing for different voted_voters in votedDataMerged
> # (which differed by voting method and voted_party code), a new dataframe has to be created 
> # (Akshay explained) this to me.
> 
> voterStatDf <- aggregate(votedDataMerged$voted_voters, 
+                          by=list(votedDataMerged$county_desc , votedDataMerged$precinct_abbrv, 
+                                  votedDataMerged$vtd_abbrv,votedDataMerged$party_cd, votedDataMerged$age,
+                                  votedDataMerged$race_code,votedDataMerged$ethnic_code,votedDataMerged$sex_code,
+                                  votedDataMerged$total_voters), sum) 
> 
> colnames(voterStatDf) <- c("county_desc", "precinct_abbrv", "vtd_abbrv" ,"party_cd",   
+                            "age", "race_code", "ethnic_code", "sex_code",  "total_voters",        
+                            "voted_voters")
> 
> 
> #Calculating total voting percentage after merging
> Num_all_voters <- sum(voterStatDf$total_voters)             #6,070,763 (Total voters)
> Num_of_voted_voters <- sum(voterStatDf$voted_voters)        #4,097,895  (Voters who voted)
> Percent_Voted = (Num_of_voted_voters*100)/Num_all_voters    #67.52% Voters Voted
> 
> #Checking number & percentage of observations which has more Voted votes than total voters
> 
> ## in Voter stats dataframe (Anomaly more people voted than registered voters)
> nrow(voterStatDf[voterStatDf$voted_voters > voterStatDf$total_voters,  ]) # 3023 (0.84%)
[1] 3023
> 
> ## in voter data merged dataframe
> nrow(votedDataMerged[votedDataMerged$voted_voters > votedDataMerged$total_voters,  ]) # 622 (0.1%)
[1] 622
> 
> 
> #counting and plotting number of observations for each county
> dt = aggregate(voterStatDf$county_desc, list(voterStatDf$county_desc), length)
> colnames(dt) = c('County','NbrOfObs')
> 
> ggplot(dt)+
+   geom_bar(aes(x=County, y=NbrOfObs), stat = 'identity')+
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1, size = 3))
> 
> 
> #counting and plotting number of total voters and voted voters for each county
> dt = aggregate(voterStatDf$total_voters, list(voterStatDf$county_desc), sum)
> colnames(dt) = c('County','NbrOfTotalVoters')
> dt2 = aggregate(voterStatDf$voted_voters, list(voterStatDf$county_desc), sum)
> colnames(dt2) = c('County','NbrOfVotedVoters')
> dt3 = merge(dt, dt2, by = "County")
> dt3 = mutate(dt3, percentVoted = round((NbrOfVotedVoters/NbrOfTotalVoters),2))
> 
> ggplot(dt3, aes(x=County))+
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.4)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.4)+
+   ggtitle("Distribution of Total Voter and Voted voters for 20 Counties") +
+   geom_text(data=dt3,aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             vjust = 0.6, hjust= -0.2, angle=90, size=2.5) +
+   xlab("Counties")+
+   ylab("Voter Count") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1,size=2))
> 
> #############################################################################################
> 
> #Selecting 20 counties at rondom
> 
> set.seed(98)
> counties = sample(as.character(unique(votedDataMerged$county_desc)), size = 20,replace = T)
> 
> #Couting number of observations of 20 selected counties 
> 
> print(counties)
 [1] "BERTIE"     "CALDWELL"   "FRANKLIN"   "DARE"       "HARNETT"    "JONES"      "CHATHAM"   
 [8] "SWAIN"      "PAMLICO"    "BUNCOMBE"   "CHEROKEE"   "MCDOWELL"   "STOKES"     "PITT"      
[15] "NASH"       "SURRY"      "WARREN"     "TYRRELL"    "LENOIR"     "CUMBERLAND"
> 
> # [1] "BERTIE"     "CALDWELL"   "FRANKLIN"   "DARE"      
> # [5] "HARNETT"    "JONES"      "CHATHAM"    "SWAIN"     
> # [9] "PAMLICO"    "BUNCOMBE"   "CHEROKEE"   "MCDOWELL"  
> # [13] "STOKES"     "PITT"       "NASH"       "SURRY"     
> # [17] "WARREN"     "TYRRELL"    "LENOIR"     "CUMBERLAND"
> 
> #colnames(voting_dataset) - 12 columns
> # county_desc   | 
> # precinct_abbrv| vtd_abbrv | 
> # race_code     | sex_code  | age | ethnic_code
> # total_voters  |  party_cd  
> # voting_method_desc | voted_voters | voted_party_cd
> 
> #Subsetting data for 20 counties from merged and stats table
> 
> voting_dataset = subset(votedDataMerged, county_desc %in% counties)
> voting_stats_dataset = subset(voterStatDf, county_desc %in% counties)
> 
> #Calculating total voting percentage after sampling (makes sense)
> 
> Num_all_voters <- sum(voting_stats_dataset$total_voters)        #947,012 (Total voters)
> Num_of_voted_voters <- sum(voting_stats_dataset$voted_voters)   #648,649  (Voters who voted)
> Percent_Voted = (Num_of_voted_voters*100)/Num_all_voters        #68.49% Voters Voted
> 
> 
> #Counting and Plotting the number of observations for 20 couties 
> 
> dt = aggregate(voting_stats_dataset$county_desc, list(voting_stats_dataset$county_desc), length)
> colnames(dt) = c('County','NbrOfObs')
> 
> ggplot(dt,aes(x=County, y=NbrOfObs),label=NbrOfObs)+
+   geom_bar(stat='identity',fill='Blue2', width = 0.4)+
+   ylim(0,15500)+
+   geom_text(aes(label= scales::comma(NbrOfObs)),hjust=0.5,vjust=-0.8,size=3)+
+   ggtitle("Number of Observations for 20 Counties") +
+   theme( plot.title = element_text(hjust = 0.5),
+          axis.text.x = element_text(angle = 45,hjust = 1))
> 
> 
> #Checking number observations where party has changed
> nrow(voting_dataset[voting_dataset$party_cd != voting_dataset$voted_party_cd,]) #868 (0.8%)
[1] 868
> 
> # Since only 0.8% observations have different partycd and voted_party_cd. 
> # Dropping party_cd column
> 
> voting_dataset$party_cd <- NULL
> 
> # Plotting some EDA
> 
> #############################################################################################
> 
> ## Calculating County-wise total and voted voters per county along with %voted
> 
> dt = aggregate(c(voting_stats_dataset$total_voters), list(voting_stats_dataset$county_desc), sum)
> colnames(dt) = c('County','NbrOfTotalVoters')
> dt2 = aggregate(c(voting_stats_dataset$voted_voters), list(voting_stats_dataset$county_desc), sum)
> colnames(dt2) = c('County','NbrOfVotedVoters')
> dt3 = merge(dt, dt2, by = "County")
> dt3 = mutate(dt3, percentVoted = round((NbrOfVotedVoters/NbrOfTotalVoters),2))
> 
> ## Plotting number of total voters and count of voters who voted
> 
> ggplot(dt3, aes(x=County))+
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.4)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.4)+
+   ggtitle("Distribution of Total Voter and Voted voters for 20 Counties") +
+   geom_text(data=dt3,aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             vjust = 0.6, hjust= -0.2, angle=90, size=2.5 ) +
+   ylim(0,200000)+
+   xlab("Counties")+
+   ylab("Voter Count") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))
> 
> #############################################################################################
> 
> # Gender wise voter turnout
> 
> ## Calculating Gender-wise total and voted voters per county along with %voted
> 
> dt = aggregate(c(voting_stats_dataset$total_voters), 
+                list(voting_stats_dataset$sex_code), sum)
> colnames(dt) = c('sex_code','NbrOfTotalVoters')
> dt2 = aggregate(c(voting_stats_dataset$voted_voters), 
+                 list(voting_stats_dataset$sex_code), sum)
> colnames(dt2) = c('sex_code','NbrOfVotedVoters')
> dt3 = merge(dt, dt2, by = "sex_code")
> dt3 = mutate(dt3, percentVoted = round((NbrOfVotedVoters/NbrOfTotalVoters),2))
> 
> ## Plotting number of total voters and count of voters who voted
> 
> ggplot(dt3, aes(x=sex_code))+
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.4)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.2)+
+   ggtitle("Gender-wise Voter Turnout") +
+   geom_text(data=dt3,aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             vjust = -0.4, hjust= 0.4, angle=0, size=3 ) +
+   xlab("Gender")+
+   ylab("Voter Count") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))
> 
> #############################################################################################
> 
> ## Plotting Voter turnout based on county and gender
> 
> # Calculating total and voted voters per county along with %voted
> dt = aggregate(c(voting_stats_dataset$total_voters), 
+                list(voting_stats_dataset$county_desc,voting_stats_dataset$sex_code), sum)
> colnames(dt) = c('County',"Sex_code",'NbrOfTotalVoters')
> dt2 = aggregate(c(voting_stats_dataset$voted_voters), 
+                 list(voting_stats_dataset$county_desc,voting_stats_dataset$sex_code), sum)
> colnames(dt2) = c('County',"Sex_code", "NbrOfVotedVoters")
> dt3 = merge(dt, dt2, by.x = c("County","Sex_code"), by.y=c("County","Sex_code"))
> dt3 = mutate(dt3, percentVoted = round((NbrOfVotedVoters/NbrOfTotalVoters),2))
> 
> ## plotting number of total voters and count of voters who voted 
> 
> ## County Wise
> 
> ggplot(dt3, aes(x=County))+
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2')+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2')+
+   ggtitle("County-wise Voter Turnout") +
+   geom_text(data=dt3,aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             hjust = -0.1, vjust = 0.5, angle=90, size=3) +
+   ylim(0,105000)+
+   xlab("Counties")+
+   ylab("Voter Count") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))+
+   facet_wrap(~Sex_code)
> 
> ## Gender Wise 
> 
> ggplot(dt3, aes(x=Sex_code))+
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.6)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.4)+
+   ggtitle("Gender-wise voter Turnout") +
+   geom_text(data=dt3,aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             hjust = 0.5, vjust = -0.5, angle=0, size=3) +
+   ylim(0,105000)+
+   xlab("Counties")+
+   ylab("Voter Count") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))+
+   facet_wrap(~County)
> 
> ### Based on the analysis, it seems for each county, the number of males and females who voted
> ### were comparable (+/- 2%)
> 
> #############################################################################################
> 
> #Calculating and plotting Party wise voter turnout according to Gender
> 
> ## Calculating. Making dataframe for new values and groups 
> 
> dt = aggregate(c(voting_stats_dataset$total_voters), 
+                list(voting_stats_dataset$party_cd,voting_stats_dataset$sex_code), sum)
> colnames(dt) = c('party_cd',"Sex_code",'NbrOfTotalVoters')
> dt2 = aggregate(c(voting_stats_dataset$voted_voters), 
+                 list(voting_stats_dataset$party_cd,voting_stats_dataset$sex_code), sum)
> colnames(dt2) = c('party_cd',"Sex_code", "NbrOfVotedVoters")
> dt3 = merge(dt, dt2, by = c("party_cd","Sex_code"))
> dt3 = mutate(dt3, percentVoted = round((NbrOfVotedVoters/NbrOfTotalVoters),2))
> 
> ## Plotting
> 
> female_party_plot <- ggplot(dt3[dt3$Sex_code=="F",], aes(x=party_cd))+ 
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.4)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.2)+
+   ggtitle("Party-wise Voter-Turnout (Female)") +
+   geom_text(data=dt3[dt3$Sex_code=="F",],
+             aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             hjust = 0.5, vjust = -0.5, angle=0, size=3) +
+   xlab("Party Code")+
+   ylab("Female Voters") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))
> 
> male_party_plot <- ggplot(dt3[dt3$Sex_code=="M",], aes(x=party_cd))+ 
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.4)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.2)+
+   ggtitle("Party-wise Voter-Turnout (Male)") +
+   geom_text(data=dt3[dt3$Sex_code=="M",],
+             aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             hjust = 0.5, vjust = -0.5, angle=0, size=3) +
+   xlab("Party Code")+
+   ylab("Male Voters") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))
> 
> 
> ggarrange(male_party_plot,female_party_plot, ncol = 2)
> 
> #############################################################################################
> 
> #Calculating and plotting Age wise voter turnout according to Gender
> 
> dt = aggregate(c(voting_stats_dataset$total_voters), 
+                list(voting_stats_dataset$age,voting_stats_dataset$sex_code), sum)
> colnames(dt) = c('age',"Sex_code",'NbrOfTotalVoters')
> dt2 = aggregate(c(voting_stats_dataset$voted_voters), 
+                 list(voting_stats_dataset$age,voting_stats_dataset$sex_code), sum)
> colnames(dt2) = c('age',"Sex_code", "NbrOfVotedVoters")
> dt3 = merge(dt, dt2, by = c("age","Sex_code"))
> dt3 = mutate(dt3, percentVoted = round((NbrOfVotedVoters/NbrOfTotalVoters),2))
> 
> 
> female_age_plot <- ggplot(dt3[dt3$Sex_code=="F",], aes(x=age))+ 
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.4)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.2)+
+   ggtitle("Age wise Voter-Turnout (Female)") +
+   geom_text(data=dt3[dt3$Sex_code=="F",],
+             aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             hjust = 0.5, vjust = -0.5, angle=0, size=3) +
+   xlab("Age Groups")+
+   ylab("Female Voters") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))
> 
> male_age_plot <- ggplot(dt3[dt3$Sex_code=="M",], aes(x=age))+ 
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.4)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.2)+
+   ggtitle("Age wise Voter-Turnout (Male)") +
+   geom_text(data=dt3[dt3$Sex_code=="M",],
+             aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             hjust = 0.5, vjust = -0.5, angle=0, size=3) +
+   xlab("Age Groups")+
+   ylab("Male Voters") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))
> 
> 
> ggarrange(female_age_plot,male_age_plot, ncol = 2)
> 
> #############################################################################################
> 
> #Calculating and plotting Race wise voter turnout according to Gender
> 
> dt = aggregate(c(voting_stats_dataset$total_voters), 
+                list(voting_stats_dataset$race,voting_stats_dataset$sex_code), sum)
> colnames(dt) = c('race',"Sex_code",'NbrOfTotalVoters')
> dt2 = aggregate(c(voting_stats_dataset$voted_voters), 
+                 list(voting_stats_dataset$race,voting_stats_dataset$sex_code), sum)
> colnames(dt2) = c('race',"Sex_code", "NbrOfVotedVoters")
> dt3 = merge(dt, dt2, by = c("race","Sex_code"))
> dt3 = mutate(dt3, percentVoted = round((NbrOfVotedVoters/NbrOfTotalVoters),2))
> 
> 
> female_race_plot <- ggplot(dt3[dt3$Sex_code=="F",], aes(x=race))+ 
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.4)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.2)+
+   ggtitle("Race wise Voter-Turnout (Female)") +
+   geom_text(data=dt3[dt3$Sex_code=="F",],
+             aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             hjust = 0.5, vjust = -0.5, angle=0, size=3) +
+   xlab("Race")+
+   ylab("Female Voters") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))
> 
> male_race_plot <- ggplot(dt3[dt3$Sex_code=="M",], aes(x=race))+ 
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.4)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.2)+
+   ggtitle("Race wise Voter-Turnout (Male)") +
+   geom_text(data=dt3[dt3$Sex_code=="M",],
+             aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             hjust = 0.5, vjust = -0.5, angle=0, size=3) +
+   xlab("Race")+
+   ylab("Male Voters") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))
> 
> 
> ggarrange(female_race_plot,male_race_plot, ncol = 2)
> 
> #############################################################################################
> 
> #Calculating and plotting Race wise voter turnout according to Ethinic Group
> 
> dt = aggregate(c(voting_stats_dataset$total_voters), 
+                list(voting_stats_dataset$ethnic_code,voting_stats_dataset$sex_code), sum)
> colnames(dt) = c('ethnic_code',"Sex_code",'NbrOfTotalVoters')
> dt2 = aggregate(c(voting_stats_dataset$voted_voters), 
+                 list(voting_stats_dataset$ethnic_code,voting_stats_dataset$sex_code), sum)
> colnames(dt2) = c('ethnic_code',"Sex_code", "NbrOfVotedVoters")
> dt3 = merge(dt, dt2, by = c("ethnic_code","Sex_code"))
> dt3 = mutate(dt3, percentVoted = round((NbrOfVotedVoters/NbrOfTotalVoters),2))
> 
> 
> female_ethnic_plot <- ggplot(dt3[dt3$Sex_code=="F",], aes(x=ethnic_code))+ 
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.4)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.2)+
+   ggtitle("Ethnic-code wise Voter-Turnout (Female)") +
+   geom_text(data=dt3[dt3$Sex_code=="F",],
+             aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             hjust = 0.5, vjust = -0.5, angle=0, size=3) +
+   xlab("Ethnic-code")+
+   ylab("Female Voters") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))
> 
> male_ethnic_plot <- ggplot(dt3[dt3$Sex_code=="M",], aes(x=ethnic_code))+ 
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.4)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.2)+
+   ggtitle("Ethnic-code wise Voter-Turnout (Male)") +
+   geom_text(data=dt3[dt3$Sex_code=="M",],
+             aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             hjust = 0.5, vjust = -0.5, angle=0, size=3) +
+   xlab("Ethnic-code")+
+   ylab("Male Voters") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))
> 
> 
> ggarrange(female_ethnic_plot,male_ethnic_plot, ncol = 2)
> 
> #############################################################################################
> 
> #Calculating and plotting Age-wise wise voter turnout according to Ethinic Group
> 
> dt = aggregate(c(voting_stats_dataset$total_voters), 
+                list(voting_stats_dataset$ethnic_code,voting_stats_dataset$age), sum)
> colnames(dt) = c('ethnic_code',"age",'NbrOfTotalVoters')
> dt2 = aggregate(c(voting_stats_dataset$voted_voters), 
+                 list(voting_stats_dataset$ethnic_code,voting_stats_dataset$age), sum)
> colnames(dt2) = c('ethnic_code',"age", "NbrOfVotedVoters")
> dt3 = merge(dt, dt2, by = c("ethnic_code","age"))
> dt3 = mutate(dt3, percentVoted = round((NbrOfVotedVoters/NbrOfTotalVoters),2))
> 
> 
> agewise_ethnic_plot <- ggplot(dt3, aes(x=age))+ 
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.4)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.2)+
+   ggtitle("Age-wise Voter-Turnout for Ethnic groups") +
+   geom_text(data=dt3,
+             aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             hjust = 0.5, vjust = -0.5, angle=0, size=3) +
+   xlab("Age")+
+   ylab("Voters") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))+
+   facet_wrap(~ethnic_code)
> 
> ethnicwise_age_plot <- ggplot(dt3, aes(x=ethnic_code))+ 
+   geom_bar(aes(y=NbrOfTotalVoters), stat = 'identity', fill='Blue2', width = 0.4)+
+   geom_bar(aes(y=NbrOfVotedVoters), stat = 'identity', fill='Orange2', width = 0.2)+
+   ggtitle("Ethnic group wise Voter-Turnout for Age groups") +
+   geom_text(data=dt3,
+             aes(y=NbrOfTotalVoters,label=scales::percent(percentVoted)), 
+             hjust = 0.5, vjust = -0.5, angle=0, size=3) +
+   xlab("Ehnic Code")+
+   ylab("Voters") +
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1))+
+   facet_wrap(~age)
> 
> ggarrange(agewise_ethnic_plot,ethnicwise_age_plot, ncol = 2)
> 
> #############################################################################################
> 
> # EDA Complete Moving into Modeling
> # Use voting_stats_dataset
> colnames(voting_stats_dataset)
 [1] "county_desc"    "precinct_abbrv" "vtd_abbrv"      "party_cd"       "age"            "race_code"     
 [7] "ethnic_code"    "sex_code"       "total_voters"   "voted_voters"  
> 
> # [1] "county_desc"    "precinct_abbrv" "vtd_abbrv"      "party_cd"       "age"           
> # [6] "race_code"      "ethnic_code"    "sex_code"       "total_voters"   "voted_voters" 
> 
> # All factors included, with varying effects by county. 
> Model_1 <- glmer(cbind(total_voters, voted_voters) ~ (1|county_desc) + 
+                  race_code + ethnic_code + age + party_cd + sex_code, 
+                data = voting_stats_dataset, family = binomial)
> 
> summary(Model_1)
Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) ['glmerMod']
 Family: binomial  ( logit )
Formula: cbind(total_voters, voted_voters) ~ (1 | county_desc) + race_code +      ethnic_code + age + party_cd + sex_code
   Data: voting_stats_dataset

     AIC      BIC   logLik deviance df.resid 
167685.8 167847.3 -83824.9 167649.8    58105 

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-3.5169 -0.3349 -0.1242  0.2496  5.3325 

Random effects:
 Groups      Name        Variance Std.Dev.
 county_desc (Intercept) 0.00441  0.06641 
Number of obs: 58123, groups:  county_desc, 20

Fixed effects:
                Estimate Std. Error z value Pr(>|z|)    
(Intercept)     0.339244   0.030924  10.970  < 2e-16 ***
race_codeB      0.194583   0.022966   8.473  < 2e-16 ***
race_codeI      0.099661   0.032104   3.104 0.001907 ** 
race_codeM     -0.092415   0.032075  -2.881 0.003962 ** 
race_codeO      0.211176   0.026159   8.073 6.87e-16 ***
race_codeU      0.113557   0.025453   4.461 8.14e-06 ***
race_codeW      0.176310   0.022742   7.752 9.01e-15 ***
ethnic_codeNL   0.083161   0.014029   5.928 3.07e-09 ***
ethnic_codeUN   0.100203   0.014258   7.028 2.10e-12 ***
ageAge 26 - 40 -0.068030   0.006156 -11.051  < 2e-16 ***
ageAge 41 - 65 -0.329286   0.005718 -57.587  < 2e-16 ***
ageAge Over 66 -0.354563   0.006313 -56.162  < 2e-16 ***
party_cdLIB    -0.176187   0.027061  -6.511 7.48e-11 ***
party_cdREP    -0.070899   0.004417 -16.050  < 2e-16 ***
party_cdUNA     0.074500   0.004351  17.121  < 2e-16 ***
sex_codeM       0.053906   0.003306  16.307  < 2e-16 ***
sex_codeU      -0.049299   0.012974  -3.800 0.000145 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Correlation matrix not shown by default, as p = 17 > 12.
Use print(x, correlation=TRUE)  or
    vcov(x)        if you need it

> 
> Model_2 <- glmer(cbind(total_voters, voted_voters) ~ (1|county_desc) + 
+                    race_code + ethnic_code + age + party_cd + sex_code, 
+                  data = voting_stats_dataset, family = binomial)
> 
> summary(Model_1)
Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) ['glmerMod']
 Family: binomial  ( logit )
Formula: cbind(total_voters, voted_voters) ~ (1 | county_desc) + race_code +      ethnic_code + age + party_cd + sex_code
   Data: voting_stats_dataset

     AIC      BIC   logLik deviance df.resid 
167685.8 167847.3 -83824.9 167649.8    58105 

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-3.5169 -0.3349 -0.1242  0.2496  5.3325 

Random effects:
 Groups      Name        Variance Std.Dev.
 county_desc (Intercept) 0.00441  0.06641 
Number of obs: 58123, groups:  county_desc, 20

Fixed effects:
                Estimate Std. Error z value Pr(>|z|)    
(Intercept)     0.339244   0.030924  10.970  < 2e-16 ***
race_codeB      0.194583   0.022966   8.473  < 2e-16 ***
race_codeI      0.099661   0.032104   3.104 0.001907 ** 
race_codeM     -0.092415   0.032075  -2.881 0.003962 ** 
race_codeO      0.211176   0.026159   8.073 6.87e-16 ***
race_codeU      0.113557   0.025453   4.461 8.14e-06 ***
race_codeW      0.176310   0.022742   7.752 9.01e-15 ***
ethnic_codeNL   0.083161   0.014029   5.928 3.07e-09 ***
ethnic_codeUN   0.100203   0.014258   7.028 2.10e-12 ***
ageAge 26 - 40 -0.068030   0.006156 -11.051  < 2e-16 ***
ageAge 41 - 65 -0.329286   0.005718 -57.587  < 2e-16 ***
ageAge Over 66 -0.354563   0.006313 -56.162  < 2e-16 ***
party_cdLIB    -0.176187   0.027061  -6.511 7.48e-11 ***
party_cdREP    -0.070899   0.004417 -16.050  < 2e-16 ***
party_cdUNA     0.074500   0.004351  17.121  < 2e-16 ***
sex_codeM       0.053906   0.003306  16.307  < 2e-16 ***
sex_codeU      -0.049299   0.012974  -3.800 0.000145 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Correlation matrix not shown by default, as p = 17 > 12.
Use print(x, correlation=TRUE)  or
    vcov(x)        if you need it

> ggplot(dt)+
+   geom_bar(aes(x=County, y=NbrOfObs), stat = 'identity')+
+   theme(legend.position = "none",
+         plot.title = element_text(hjust = 0.5),
+         axis.text.x = element_text(angle = 45,hjust = 1, size = 3))
Error in FUN(X[[i]], ...) : object 'County' not found
> BIC_backward <- step(Model_1, scope = formula(full_model), trace = 0, direction = 'backward')
Error in `$<-`(`*tmp*`, formula, value = Terms) : 
  no method for assigning subsets of this S4 class
> BIC_backward <- step(Model_1, scope = formula(full_model), trace = 0, direction = 'backward')
Error in `$<-`(`*tmp*`, formula, value = Terms) : 
  no method for assigning subsets of this S4 class
> summary(Model_1)
Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) ['glmerMod']
 Family: binomial  ( logit )
Formula: cbind(total_voters, voted_voters) ~ (1 | county_desc) + race_code +  
    ethnic_code + age + party_cd + sex_code
   Data: voting_stats_dataset

     AIC      BIC   logLik deviance df.resid 
167685.8 167847.3 -83824.9 167649.8    58105 

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-3.5169 -0.3349 -0.1242  0.2496  5.3325 

Random effects:
 Groups      Name        Variance Std.Dev.
 county_desc (Intercept) 0.00441  0.06641 
Number of obs: 58123, groups:  county_desc, 20

Fixed effects:
                Estimate Std. Error z value Pr(>|z|)    
(Intercept)     0.339244   0.030924  10.970  < 2e-16 ***
race_codeB      0.194583   0.022966   8.473  < 2e-16 ***
race_codeI      0.099661   0.032104   3.104 0.001907 ** 
race_codeM     -0.092415   0.032075  -2.881 0.003962 ** 
race_codeO      0.211176   0.026159   8.073 6.87e-16 ***
race_codeU      0.113557   0.025453   4.461 8.14e-06 ***
race_codeW      0.176310   0.022742   7.752 9.01e-15 ***
ethnic_codeNL   0.083161   0.014029   5.928 3.07e-09 ***
ethnic_codeUN   0.100203   0.014258   7.028 2.10e-12 ***
ageAge 26 - 40 -0.068030   0.006156 -11.051  < 2e-16 ***
ageAge 41 - 65 -0.329286   0.005718 -57.587  < 2e-16 ***
ageAge Over 66 -0.354563   0.006313 -56.162  < 2e-16 ***
party_cdLIB    -0.176187   0.027061  -6.511 7.48e-11 ***
party_cdREP    -0.070899   0.004417 -16.050  < 2e-16 ***
party_cdUNA     0.074500   0.004351  17.121  < 2e-16 ***
sex_codeM       0.053906   0.003306  16.307  < 2e-16 ***
sex_codeU      -0.049299   0.012974  -3.800 0.000145 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Correlation matrix not shown by default, as p = 17 > 12.
Use print(x, correlation=TRUE)  or
    vcov(x)        if you need it

> BIC_backward <- step(Model_1, scope = formula(full_model), trace = 0, direction = 'backward')
Error in `$<-`(`*tmp*`, formula, value = Terms) : 
  no method for assigning subsets of this S4 class
> BIC_backward <- step(Model_1, scope = formula(full_model), trace = 0, direction = 'backward')
Error in `$<-`(`*tmp*`, formula, value = Terms) : 
  no method for assigning subsets of this S4 class
> BIC_backward$call
Error: object 'BIC_backward' not found
> BIC_backward <- step(Model_1, scope = full_model, trace = 0, direction = 'backward')
Error in `$<-`(`*tmp*`, formula, value = Terms) : 
  no method for assigning subsets of this S4 class
> ?step
> library(MASS)

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select

> BIC_backward <- step(Model_1, scope = full_model, trace = 0, direction = 'backward')
Error in `$<-`(`*tmp*`, formula, value = Terms) : 
  no method for assigning subsets of this S4 class
> # All factors included, with varying effects by county. 
> model_full <- glmer(cbind(total_voters, voted_voters) ~ (1|county_desc) + 
+                  race_code + ethnic_code + age + party_cd + sex_code, 
+                data = voting_stats_dataset, family = binomial)
> model_base <- glmer(cbind(total_voters, voted_voters) ~ 1, data=voting_stats_dataset,
+                     family = binomial)
Error: No random effects terms specified in formula
> model_base <- glmer(cbind(total_voters, voted_voters) ~ (1|county_desc), data=voting_stats_dataset,
+                     family = binomial)
> model_stepwise_aic = step(model_base,
+                           scope = list(upper = model_full,
+                                        lower = model_base),
+                           direction = 'both',
+                           trace=0,
+                           k = 2)
Error in `$<-`(`*tmp*`, formula, value = Terms) : 
  no method for assigning subsets of this S4 class
> summary(model_full)
Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) ['glmerMod']
 Family: binomial  ( logit )
Formula: cbind(total_voters, voted_voters) ~ (1 | county_desc) + race_code +  
    ethnic_code + age + party_cd + sex_code
   Data: voting_stats_dataset

     AIC      BIC   logLik deviance df.resid 
167685.8 167847.3 -83824.9 167649.8    58105 

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-3.5169 -0.3349 -0.1242  0.2496  5.3325 

Random effects:
 Groups      Name        Variance Std.Dev.
 county_desc (Intercept) 0.00441  0.06641 
Number of obs: 58123, groups:  county_desc, 20

Fixed effects:
                Estimate Std. Error z value Pr(>|z|)    
(Intercept)     0.339244   0.030924  10.970  < 2e-16 ***
race_codeB      0.194583   0.022966   8.473  < 2e-16 ***
race_codeI      0.099661   0.032104   3.104 0.001907 ** 
race_codeM     -0.092415   0.032075  -2.881 0.003962 ** 
race_codeO      0.211176   0.026159   8.073 6.87e-16 ***
race_codeU      0.113557   0.025453   4.461 8.14e-06 ***
race_codeW      0.176310   0.022742   7.752 9.01e-15 ***
ethnic_codeNL   0.083161   0.014029   5.928 3.07e-09 ***
ethnic_codeUN   0.100203   0.014258   7.028 2.10e-12 ***
ageAge 26 - 40 -0.068030   0.006156 -11.051  < 2e-16 ***
ageAge 41 - 65 -0.329286   0.005718 -57.587  < 2e-16 ***
ageAge Over 66 -0.354563   0.006313 -56.162  < 2e-16 ***
party_cdLIB    -0.176187   0.027061  -6.511 7.48e-11 ***
party_cdREP    -0.070899   0.004417 -16.050  < 2e-16 ***
party_cdUNA     0.074500   0.004351  17.121  < 2e-16 ***
sex_codeM       0.053906   0.003306  16.307  < 2e-16 ***
sex_codeU      -0.049299   0.012974  -3.800 0.000145 ***







\[\log(\frac{\pi_i}{1-\pi_i}) = \beta_0 + \beta_1 Black + \beta_2 Asian + \beta_3 MotherWeight +  \beta_3 Smoking\]
where $y_i|x_i \sim$ Bernouilli($\pi_i$)